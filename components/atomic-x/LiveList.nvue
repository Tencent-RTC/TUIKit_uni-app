<template>
  <view class="live-list">
   <view class="live-list-quick-join">
      <input
        v-model="inputLiveId"
        class="quick-join-input"
        placeholder="输入 liveId 进入房间"
        confirm-type="done"
        @confirm="handleJoinLiveById"
        maxlength="64"
      />
      <button
        class="quick-join-btn"
        :disabled="isLoadingJoin"
        @tap="handleJoinLiveById"
        size="mini"
        type="primary"
      >进入房间</button>
      <button
        class="quick-join-btn"
        @tap="handleRefresh"
        size="mini"
        type="primary"
      >刷新</button>
    </view>

    <!-- 直播列表内容 -->
    <list class="live-list-content" @loadmore="loadMore" :show-scrollbar="false">
      <cell v-for="(row, rowIndex) in groupedLiveList" :key="`row-${rowIndex}-${row[0]?.liveId || 'empty'}`">
        <view class="live-row">
          <view 
            v-for="(live, index) in row" 
            :key="live.liveId"
            class="live-card"
            @tap="handleJoinLive(live)"
          >
            <view class="live-cover">
              <image
                :src="live.coverUrl || defaultCoverUrl"
                :mode="'aspectFill'"
                class="cover-image"
                @error="handleCoverError(live)"
              />
              <view class="live-status">
                <view class="live-bar-container">
                  <view class="bar bar-1"></view>
                  <view class="bar bar-2"></view>
                  <view class="bar bar-3"></view>
                </view>
                <text class="viewer-count">{{ formatViewerCount(live.totalViewerCount) }}人看过</text>
              </view>
              <!-- 直播信息覆盖在封面图底部 -->
              <view class="live-info-overlay">
                <text class="live-title" :lines="1">{{ live.liveName }}</text>
                <view class="live-owner">
                  <image
                    :src="live.liveOwner.avatarUrl || defaultAvatarUrl"
                    class="owner-avatar"
                    mode="aspectFill"
                  />
                  <text class="owner-name" :numberOfLines="1">{{ live.liveOwner.userName }}</text>
                </view>
              </view>
            </view>
          </view>
        </view>
      </cell>
    </list>
  </view>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue';
import { onLoad } from '@dcloudio/uni-app';

import { useLiveState } from "@/uni_modules/ui-component/state/livestate";
const { liveList, liveListCursor, joinLive, fetchLiveList, schedule } = useLiveState();

// 数据状态
const inputLiveId = ref(''); // 'live_'
const isLoadingJoin = ref(false);
const isRefreshing = ref(false);
// 默认图片
const defaultCoverUrl = 'https://liteav-test-1252463788.cos.ap-guangzhou.myqcloud.com/voice_room/voice_room_cover1.png';
const defaultAvatarUrl = 'https://web.sdk.qcloud.com/component/TUIKit/assets/avatar_01.png';


onMounted(() => {
  const params = {
		cursor: "", // 首次拉起传空（不能是null),然后根据回调数据的cursor确认是否拉完
		count: 20,   // 分页拉取的个数
	};
  fetchLiveList(params);
})

// 进入直播间
const handleJoinLive = async (live) => {
  try {
		uni.$liveId = live.liveId;
    
		uni.redirectTo({ url: `/pages/audience/index?liveId=${live.liveId}` });
  } catch (error) {
    console.error('进入直播间失败:', error);
    uni.showToast({
      title: '进入直播间失败',
      icon: 'none'
    });
  }
};


const handleRefresh = () =>  {
  const params = {
    cursor: '', // 首次拉起传空（不能是null),然后根据回调数据的cursor确认是否拉完
    count: 20,   // 分页拉取的个数
    success: () => {
      fetchLiveListRecursively(liveListCursor.value); // 最多尝试3次
    }
  };
  fetchLiveList(params);
}

// 递归拉取直播列表
const fetchLiveListRecursively = (cursor) => {
  const params = {
    cursor: cursor,
    count: 20,
    success: (res) => {
      if (liveListCursor.value) {
        fetchLiveListRecursively(liveListCursor.value);
      } else {
        uni.showToast({
          title: '刷新完成',
        });
        console.log('没有更多数据，递归结束');
      }
    },
    fail: (err) => {
      console.error(`fetchLiveListRecursively failed, err: ${JSON.stringify(err)}`);
    }
  };
  fetchLiveList(params);
}

const handleJoinLiveById = () => {
  if (!inputLiveId.value.trim()) {
    uni.showToast({ title: '请输入 liveId', icon: 'none' });
    return;
  }
	uni.$liveId = inputLiveId.value.trim();
	
  isLoadingJoin.value = true;
	
  joinLive({
    liveId: inputLiveId.value.trim(),
    success: () => {
      isLoadingJoin.value = false;
      uni.redirectTo({
        url: `/pages/audience/index?liveId=${inputLiveId.value.trim()}`,
      });
    },
    fail: (error) => {
      isLoadingJoin.value = false;
      console.error('进房失败 = ', JSON.stringify(error))
      
      uni.showToast({
        title: "进入失败",
        icon: "none",
        content: error?.message || "房间不存在或已关闭",
      });
    },
  });
};

const handleCoverError = (live) => {
  live.coverUrl = defaultCoverUrl;
}

// 刷新直播列表
const loadData = () => {
    fetchLiveList({
      cursor: liveListCursor.value,
      count: 20,
    })

  setTimeout(() => {
    isRefreshing.value = false;
    refreshing.value = 'hide'
  }, 100);
}

// 将直播列表分组，每行两个元素
const groupedLiveList = computed(() => {
  const groups = [];
  for (let i = 0; i < liveList.value.length; i += 2) {
    const row = liveList.value.slice(i, i + 2);
    groups.push(row);
  }
  return groups;
});

// 格式化观看人数
const formatViewerCount = (count) => {
  if (count >= 10000) {
    return `${(count / 10000).toFixed(1)}万`;
  }
  return count.toString();
};

// 加载更多
const loadMore = () => {
  if (!liveListCursor.value) {
    uni.showToast({
      title: "没有更多了",
      icon: "none"
    });
    return;
  }
  const params = {
    cursor: liveListCursor.value,
    count: 20,
  };
  fetchLiveList(params);
};
</script>

<style>
.live-list {
  width: 750rpx;
  background-color: #f5f5f5;
  flex: 1;
}

.live-list-header {
  padding: 32rpx;
}

.header-title {
  font-size: 40rpx;
  font-weight: 600;
  color: #333333;
}

.live-list-quick-join {
  flex-direction: row;
  align-items: center;
  margin: 0 32rpx 24rpx 32rpx;
}
.quick-join-input {
  flex: 1;
  height: 64rpx;
  border: 1rpx solid #e0e0e0;
  border-radius: 8rpx;
  padding: 0 20rpx;
  font-size: 28rpx;
  background: #fff;
}
.quick-join-btn {
  height: 64rpx;
  line-height: 64rpx;
  font-size: 28rpx;
  border-radius: 8rpx;
}

.live-list-content {
  width: 750rpx;
}

.live-row {
  flex-direction: row;
  padding: 0 32rpx;
  margin-bottom: 24rpx;
  justify-content: space-between;
}

.live-card {
  width: 334rpx;
  height: 500rpx;
  border-radius: 16rpx;
  background-color: #ffffff;
}

.live-cover {
  position: relative;
  width: 334rpx;
  height: 500rpx;
}

.cover-image {
  width: 334rpx;
  height: 500rpx;
  border-radius: 16rpx;
}

.live-status {
  position: absolute;
  top: 24rpx;
  left: 20rpx;
  flex-direction: row;
  align-items: center;
}

.live-bar-container {
  width: 16rpx;
  height: 16rpx;
  flex-direction: row;
  justify-content: center;
  align-items: flex-end;
  margin-right: 8rpx;
}

.bar {
  width: 4rpx;
  background-color: #5AD69E;
}

.bar-1 {
  height: 10rpx;
  margin-right: 2rpx;
}

.bar-2 {
  height: 16rpx;
  margin-right: 2rpx;
}

.bar-3 {
  height: 6rpx;
}

.viewer-count {
  color: #ffffff;
  font-size: 24rpx;
}

/* 新增：直播信息覆盖样式 */
.live-info-overlay {
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  padding: 16rpx 20rpx;
  /* 半透明黑色背景 */
}

.live-info-overlay .live-title {
  font-size: 28rpx;
  font-weight: 500;
  color: #fff;
  margin-bottom: 8rpx;
  lines: 1;
  max-width: 400rpx;
  overflow: hidden;
  text-overflow: ellipsis;
}

.live-info-overlay .live-owner {
  flex-direction: row;
  align-items: center;
}

.live-info-overlay .owner-avatar {
  width: 40rpx;
  height: 40rpx;
  border-radius: 20rpx;
  margin-right: 8rpx;
}

.live-info-overlay .owner-name {
  font-size: 24rpx;
  color: #fff;
  flex: 1;
  lines: 1;
  max-width: 300rpx;
  overflow: hidden;
  text-overflow: ellipsis;
}

.loading-container,
.empty-container,
.loading-more {
  padding: 32rpx;
  justify-content: center;
  align-items: center;
}

.loading-icon {
  width: 36rpx;
  height: 36rpx;
  color: #666666;
}

.loading-text,
.empty-text {
  margin-top: 16rpx;
  font-size: 28rpx;
  color: #666666;
}

.load-more {
  padding: 32rpx;
  justify-content: center;
}

.load-more-text {
  font-size: 28rpx;
  color: #666666;
}
</style> 