<template>
  <view 
    class="toast-container" 
    v-for="toast in visibleToasts" 
    :key="toast.id"
    :style="getToastStyle(toast)"
  >
    <view class="toast-content">
      <!-- 左侧用户信息 -->
      <view class="user-info">
        <image 
          class="user-avatar" 
          :src="toast?.avatarUrl || defaultAvatarUrl" 
          mode="aspectFill" 
        />
        <view class="user-details">
          <text class="username">{{ toast?.name || '' }}</text>
          <text class="action-text">{{ toast?.desc || '' }}</text>
        </view>
      </view>
      
      <!-- 右侧图标 -->
      <view class="icon-container" v-if="toast.iconUrl">
        <image class="icon" :src="toast?.iconUrl || ''" mode="aspectFit" />
      </view>
    </view>
  </view>
</template>

<script setup lang="ts">
import { ref, onMounted, onUnmounted } from 'vue';

const defaultAvatarUrl = 'https://web.sdk.qcloud.com/component/TUIKit/assets/avatar_01.png';
const defaultPosition = {
  top: 'auto',
  bottom: 720,
  left: 32,
  right: 'auto',
};
const toastHeight = 105;

const props = defineProps({
  // 支持传入单个toast配置
  toast: {
    type: Object as () => any,
    default: () => ({})
  }
});

const emit = defineEmits(['toastClosed']);
// 存储所有可见的toast
const visibleToasts = ref<any[]>([]);
// 生成唯一ID
const generateId = () => {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
};

// 显示toast
const showToast = (toastConfig: Partial<any>) => {
  const toast = {
    id: generateId(),
    duration: 3000,
    autoHide: true,
    position: {
      top: defaultPosition.top,
      bottom: defaultPosition.bottom + (visibleToasts.value || []).length * toastHeight,
      left: '32rpx',
      right: defaultPosition.bottom,
    },
    ...toastConfig
  };
  
  visibleToasts.value.push(toast);
  
  // 自动隐藏
  if (toast.autoHide && toast.duration) {
    setTimeout(() => {
      hideToast(toast.id);
    }, toast.duration);
  }
  
  return toast.id;
};

// 隐藏指定toast
const hideToast = (id: string) => {
  const index = visibleToasts.value.findIndex(toast => toast.id === id);
  if (index > -1) {
    const removedToast = visibleToasts.value.splice(index, 1)[0];
    emit('toastClosed', removedToast);
  }
};

// 隐藏所有toast
const hideAllToasts = () => {
  visibleToasts.value = [];
};

// 获取toast样式
const getToastStyle = (toast: any) => {
  const style: any = {
    position: 'fixed',
    zIndex: 999
  };
  
  if (toast.position) {
    if (toast.position.top !== undefined) {
      style.top = typeof toast.position.top === 'number' ? `${toast.position.top}rpx` : toast.position.top;
    }
    if (toast.position.bottom !== undefined) {
      style.bottom = typeof toast.position.bottom === 'number' ? `${toast.position.bottom}rpx` : toast.position.bottom;
    }
    if (toast.position.left !== undefined) {
      style.left = typeof toast.position.left === 'number' ? `${toast.position.left}rpx` : toast.position.left;
    }
    if (toast.position.right !== undefined) {
      style.right = typeof toast.position.right === 'number' ? `${toast.position.right}rpx` : toast.position.right;
    }
  }
  
  return style;
};

// 监听传入的toast配置
const watchToast = (newVal: ToastItem) => {
  if (newVal && Object.keys(newVal).length > 0) {
    showToast(newVal);
  }
};

onMounted(() => {
  // 如果有初始toast配置，显示它
  if (props.toast && Object.keys(props.toast).length > 0) {
    showToast(props.toast);
  }
});

// 暴露方法给父组件
defineExpose({
  showToast,
  hideToast,
  hideAllToasts
});
</script>

<style>
.toast-container {
  /* 基础样式由getToastStyle动态设置 */
}

.toast-content {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  background: rgba(34, 38, 46, 0.4);
  padding: 20rpx 24rpx;
  border: 1rpx solid rgba(255, 255, 255, 0.1);
  height: 100rpx;
  width: 320rpx;
  border-radius: 50rpx;
  backdrop-filter: blur(10rpx);
}

.user-info {
  display: flex;
  flex-direction: row;
  align-items: center;
  flex: 1;
}

.user-avatar {
  width: 80rpx;
  height: 80rpx;
  border-radius: 40rpx;
  border-width: 2rpx;
  border-color: #8B5CF6;
  margin-right: 16rpx;
}

.user-details {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.username {
  color: #ffffff;
  font-size: 28rpx;
  font-weight: 600;
  margin-bottom: 4rpx;
  max-width: 120rpx;
  lines: 1;
  text-overflow: ellipsis;
  overflow: hidden;
}

.action-text {
  color: rgba(255, 255, 255, 0.8);
  font-size: 24rpx;
  font-weight: 400;
  max-width: 120rpx;
  lines: 1;
  text-overflow: ellipsis;
  overflow: hidden;
}

.icon-container {
  width: 80rpx;
  height: 80rpx;
  display: flex;
  align-items: center;
  justify-content: center;
}

.icon {
  width: 80rpx;
  height: 80rpx;
}

/* 动画效果 */
@keyframes slideIn {
  from {
    transform: translateY(-100rpx);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideOut {
  from {
    transform: translateY(0);
    opacity: 1;
  }
  to {
    transform: translateY(-100rpx);
    opacity: 0;
  }
}

/* .toast-container {
  animation: slideIn 0.1s ease-out forwards;
}

.toast-container.hide {
  animation: slideOut 0.1s ease-in forwards;
} */
</style>