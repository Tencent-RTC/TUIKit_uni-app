<template>
  <view class="bottom-drawer-container" v-if="modelValue">
    <view class="drawer-overlay" @tap="close"></view>
    <view class="bottom-drawer" :class="{ 'drawer-open': modelValue }">
      <view class="drawer-header">
				<text style="color: rgba(213, 224, 242, 1); font-size: 32rpx;">选择连麦方式</text>
        <text style="font-size: 24rpx; font-weight: 400; color: rgba(124, 133, 166, 1); margin-top: 20rpx;">选择连麦方式，主播同意后接通</text>
			</view>
      
			<view class="drawer-content">
        <view class="drawer-actions">
           <view style="height: 2rpx; color: rgba(79, 88, 107, 0.3); width: 750rpx;  background: #fff; opacity: 0.2;" ></view>
            <view style="display: flex; flex-direction: row; align-items: center; padding: 30rpx;" @click= "handleSendCoGuest('video')">
              <image src="/static/images/mode.png" style="width: 36rpx; height: 36rpx;"></image>
              <text style="font-size: 32rpx; font-weight: 400; color: rgba(213, 224, 242, 1); padding-left: 10rpx;">申请视频连麦</text>
            </view>
            <view style="height: 2rpx; color: rgba(79, 88, 107, 0.3); width: 750rpx;  background: #fff; opacity: 0.2;" ></view>
            <view style="display: flex; flex-direction: row; align-items: center; padding: 30rpx;" @click="handleSendCoGuest('mic')">
              <image src="/static/images/live-comic.png" style="width: 36rpx; height: 36rpx;"></image>
              <text style="font-size: 32rpx; font-weight: 400; color: rgba(213, 224, 242, 1); padding-left: 10rpx;">申请语音连麦</text>
            </view>
        </view>
        <!-- <view class="divider-line-container">
          <view class="divider-line"></view>
        </view> -->
      </view>
    </view>
  </view>
</template>

<script setup lang="ts">
import { watch } from 'vue';

import { useDeviceState } from "@/uni_modules/ui-component/state/devicestate";
import { useCoGuestState } from "@/uni_modules/ui-component/state/cogueststate";
import { useLoginState } from "@/uni_modules/ui-component/state/loginstate";
import { useCoHostState } from "@/uni_modules/ui-component/state/cohoststate";
const { connectedHosts } = useCoHostState(uni?.$liveId)
const { loginUserInfo } = useLoginState()

const {
	// 响应式状态 - 麦克风相关
	microphoneStatus, microphoneStatusReason, microphoneLastError, hasPublishAudioPermission, captureVolume,
	// 响应式状态 - 摄像头相关
	cameraStatus, cameraStatusReason, cameraLastError,
	// 响应式状态 - 其他设备相关
	currentAudioRoute, isScreenSharing, isFrontCamera, isLocalMirror, screenStatus, screenStatusReason, 
	// 操作方法 - 麦克风相关，callback在params中
	openLocalMicrophone, closeLocalMicrophone, muteLocalAudio, unmuteLocalAudio, setAudioRoute,
	// 操作方法 - 摄像头相关，callback在params中
	openLocalCamera, closeLocalCamera, switchCamera, switchMirror, updateVideoQuality,
	// 操作方法 - 屏幕共享相关，callback在params中
	startScreenShare, stopScreenShare,
} = useDeviceState(uni?.$liveId);
const { 
	// 响应式状态
	localStatus, invitees, applicants, connectedGuests, invitableGuests, latestReceivedRequest, latestCancelledRequest,
	latestAcceptedRequest, latestRejectedRequest, latestTimeoutRequest,
	// 连麦请求操作方法 - callback在params中
	sendCoGuestRequest, cancelCoGuestRequest, acceptCoGuestRequest, rejectCoGuestRequest, disconnect,
	// 设备操作方法 - callback在params中
	sendOpenDeviceRequest, cancelOpenDeviceRequest, acceptOpenDeviceRequest, rejectOpenDeviceRequest, closeRemoteDevice,
} = useCoGuestState(uni?.$liveId);

const defaultAvatarUrl = 'https://web.sdk.qcloud.com/component/TUIKit/assets/avatar_01.png';
const props = defineProps({
  modelValue: {
    type: Boolean,
    default: false
  },
	liveId: {
		type: String,
	},
  userId: {
    type: String,
    default: '',
  },
  seatIndex: {
    type: Number,
    default: -1,
  },
});
const emit = defineEmits(['update:modelValue']);
const close = () => {
	emit('update:modelValue', false);
};

watch(localStatus, (newVal) => {
	console.warn('==> localStatus = ', newVal);
});


const handleSendCoGuest = (type: string) => {
	console.log(`goGuest localStatus: ${localStatus.value}`);
	if (connectedHosts.value.length > 0 ) {
    uni.showToast({
      title: '主播连线中, 不支持连麦',
      icon: 'none'
    })
    return
  }
  if (localStatus.value === 'USER_APPLYING') {
    console.log(`cancel userId: ${props?.userId}`);
    
		uni.showToast({
			title: '你已提交了连麦申请 \n请勿重复申请',
			icon: 'none',
			duration: 2000,
			position: 'center',
		});
  }
	if (localStatus.value === 'DISCONNECTED') {
		uni.showToast({
			title: '你提交了连麦申请 \n请等待主播同意',
			icon: 'none',
			duration: 2000,
			position: 'center',
		});
		
		sendCoGuestRequest({
			liveId: props.liveId,
			seatIndex: props.seatIndex, // 申请上麦传 -1, 随机分配麦位, xinlxin 反馈
			timeout: 30,
			onAccepted: (requestId, userId) => {
				console.log(`sendCoGuestRequest is acceted, userId: ${userId}`);
				// 从 aby 了解的流程: 申请上麦成功后, 主动打开摄像头、麦克风
        if(type === 'video') {
          openLocalCamera({
          	isFront: true,
          	success: () => {
          		console.log('openLocalCamera success.');
          	},
          	fail: (errCode, errMsg) => {
          		console.error(`openLocalCamera fail errCode: ${errCode}, errMsg: ${errMsg}`);
          	},
          });
        }
        openLocalMicrophone({
        	success: () => {
        		console.log('openLocalMicrophone success.');
        	},
        	fail: (errCode, errMsg) => {
        		console.error(`openLocalMicrophone fail errCode: ${errCode}, errMsg: ${errMsg}`);
        	},
        });
			},
			onRejected: (requestId, userId, msg) => {
				console.warn(`sendCoGuestRequest is rejected, userId: ${userId}`);
				uni.showToast({
					title: '上麦申请被拒绝',
          icon: 'none',
					duration: 2000,
				});
			},
			onCancelled: (requestId, userId) => {
				console.log(`sendCoGuestRequest is cancel, userId: ${userId}`);
			},
			onTimeout: (requestId, userId) => {
				console.warn(`sendCoGuestRequest is timeout, userId: ${userId}`);
				uni.showToast({
					title: '上麦申请超时',
          icon: 'none',
					duration: 2000,
				});
			},
			onError: (requestId, userId, errCode, errMsg) => {
				console.warn(`sendCoGuestRequest faid, userId: ${userId}, errCode: ${errCode}, errMsg: ${errMsg}`);
			},
		});
	}
	
	if (localStatus.value === 'USER_APPLYING') {
    console.log(`cancel userId: ${props?.userId}`);
    
		cancelCoGuestRequest({
			liveId: uni?.$liveId,
			userId: props?.userId,
			success: () => {
				console.log('cancelCoGuestRequest success.');
			},
			fail: (errCode, errMsg) => {
				console.error(`cancelCoGuestRequest fail errCode: ${errCode}, errMsg: ${errMsg}`);
			},
		});
	}
	
	if (localStatus.value === 'CONNECTED') {
    console.log(`disconnect userId: ${props?.userId}`);
    
		disconnect({
			liveId: uni?.$liveId,
			userId: props?.userId,
			// seatIndex: 5, // 断开连麦, 不需要传
			success: () => {
				console.log('disconnect success.');
			},
			fail: (errCode, errMsg) => {
				console.error(`disconnect fail errCode: ${errCode}, errMsg: ${errMsg}`);
			},
		});
	}
	
	close();
}
</script>

<style>
.bottom-drawer-container {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  top: 0;
  z-index: 1000;
}

.drawer-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.4);
}

.bottom-drawer {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(34, 38, 46, 1);
  border-top-left-radius: 32rpx;
  border-top-right-radius: 32rpx;
  transform: translateY(100%);
  transition-property: transform;
  transition-duration: 0.3s;
  transition-timing-function: ease;
  flex-direction: column;
  height: 500rpx;
}

.drawer-open {
  transform: translateY(0);
}

.drawer-header {
  padding: 48rpx;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

.drawer-header-title {
	font-size: 32rpx;
	color: rgba(255, 255, 255, 0.9);
}

.drawer-content {
  flex: 1;
}

.drawer-actions {
	display: flex;
  flex-direction: column;
  /* justify-content: space-around; */
	/* justify-content: flex-start; */
}

.action-btn {
  flex-direction: column;
  align-items: center;
  margin-right: 40rpx;
	flex: 1;
	height: 150rpx;
}

.action-btn-image-container {
  width: 100rpx;
  height: 100rpx;
  background-color: rgba(43, 44, 48, 1);
  margin-bottom: 12rpx;
  border-radius: 25rpx;
  justify-content: center;
  align-items: center;
}

.action-btn-image {
  width: 50rpx;
  height: 50rpx;
}

.action-btn-content {
  font-size: 24rpx;
  color: rgba(255, 255, 255, 0.9);
}

.divider-line-container {
  height: 68rpx;
  justify-content: center;
  position: relative;
}

.divider-line {
  width: 268rpx;
  height: 10rpx;
  border-radius: 200rpx;
  background-color: #ffffff;
  position: absolute;
  bottom: 16rpx;
}

.camera-mic-setting {
  flex: 1;
  background-color: #1f1024;
}
</style> 