import {
    LoginOptions, LogoutOptions, SetSelfInfoOptions,
    FetchLiveListOptions, CreateLiveOptions, JoinLiveOptions, EndLiveOptions, LeaveLiveOptions, UpdateLiveInfoOptions,
    LockSeatOptions, MoveToSeatOptions,
    FetchAudienceListOptions, SetAdministratorOptions, RevokeAdministratorOptions, KickUserOutOfRoomOptions, DisableSendMessageOptions,
    OpenLocalMicrophoneOptions, UnmuteLocalAudioOptions, SetAudioRouteOptions,
    OpenLocalCameraOptions, SwitchCameraOptions,
    SwitchMirrorOptions, UpdateVideoQualityOptions, startScreenShareOptions,
    SendCoHostRequestOptions, CancelCoHostRequestOptions, AcceptCoHostRequestOptions, RejectCoHostRequestOptions, ExitCoHostOptions,
    SendCoGuestRequestOptions, CancelCoGuestRequestOptions,
    AcceptCoGuestRequestOptions, RejectCoGuestRequestOptions, DisconnectOptions,
    SendOpenDeviceRequestOptions, CancelOpenDeviceRequestOptions,
    AcceptOpenDeviceRequestOptions, RejectOpenDeviceRequestOptions, CloseRemoteDeviceOptions,
    SendTextMessageOptions, SendCustomMessageOptions,
    GetGiftListOptions, SendGiftOptions,
    SetSmoothLevelOptions, SetWhitenessLevelOptions, SetRuddyLevelOptions,
    SetVoiceEarMonitorEnableOptions, SetVoiceEarMonitorVolumeOptions, SetMicrophoneVolumeOptions,
    SetChangerTypeOptions, SetReverbTypeOptions,
    SendLikeOptions,
    CallExperimentalAPIOptions,
    fetchLogfileListOptions,
} from '../interface.uts';
import { ParamsCovert } from './utils/ParamsCovert.uts';

import { TUIError, LiveInfo, TUIRoomEngine } from "RTCRoomEngine_Plus";

const RTC_TAG = "iOS-Login"
const LIVE_TAG = "iOS-Live"
const SEAT_TAG = "iOS-LiveSeat"
const AUDIENCE_TAG = "iOS-LiveAudience"
const GIFT_TAG = "iOS-Gift"
const DEVICE_TAG = "iOS-Device"
const COHOST_TAG = "iOS-CoHost"
const COGUEST_TAG = "iOS-CoGuest"
const BARRAGE_TAG = "iOS-Barrage"
const BEAUTY_TAG = "iOS-Beauty"
const AUDIOEFFECT_TAG = "iOS-AudioEffect"

export class v2RTCRoomEngineManager {

    constructor() {
        console.log(`${RTC_TAG} constructor.start`);
    }

    public login(options : LoginOptions) {
        console.log(`${RTC_TAG} login, data: ${JSON.stringify(options)}`);
        // this.setTestEnvironment()

        V2RTCRoomEngine.shared.login(
            sdkAppId = options.sdkAppID.toInt(),
            userId = options.userID,
            userSig = options.userSig,
            onSuccess = () : void => {
                console.log(`${RTC_TAG} login success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${RTC_TAG} login fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public setTestEnvironment() {
        const data = { "api": "setTestEnvironment", "params": { "enableRoomTestEnv": true } }
        TUIRoomEngine.sharedInstance().callExperimentalAPI(
            jsonStr = JSON.stringify(data) ?? "",
            callback = (jsonData : string) : void => {
                console.error(`${RTC_TAG}, setTestEnvironment, jsonData: ${jsonData}`)
            }
        )
    }

    public logout(options : LogoutOptions) {
        console.log(`${RTC_TAG} logout, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.logout(
            onSuccess = () : void => {
                console.log(`${RTC_TAG} logout success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${RTC_TAG} logout fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public setSelfInfo(options : SetSelfInfoOptions) {
        console.log(`${RTC_TAG} setSelfInfo, data: ${JSON.stringify(options)}`);
        let nativeUserInfo = ParamsCovert.convertLoginUserInfo(options.userInfo)
        V2RTCRoomEngine.shared.setSelfInfo(
            userInfo = nativeUserInfo,
            onSuccess = () : void => {
                console.log(`${RTC_TAG} setSelfInfo success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${RTC_TAG} setSelfInfo fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    //================= LiveStore 相关接口 =================
    public fetchLiveList(options : FetchLiveListOptions) {
        console.log(`${LIVE_TAG} fetchLiveList, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveStore().fetchLiveList(
            cursor = options.cursor,
            count = options.count.toUInt(),
            onSuccess = () : void => {
                console.log(`${LIVE_TAG} fetchLiveList success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${LIVE_TAG} fetchLiveList fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    private enableUnlimitedRoom() : void {
        const enableUnlimitedRoom = { "api": "enableUnlimitedRoom", "params": { "enable": true } }
        TUIRoomEngine.sharedInstance().callExperimentalAPI(
            jsonStr = JSON.stringify(enableUnlimitedRoom) ?? "",
            callback = (jsonData : string) : void => {
                console.error(`${RTC_TAG}, enableUnlimitedRoom, jsonData: ${jsonData}`)
            }
        )

        // const enableLayoutTemplateMockData = { "api": "EnableLayoutTemplateMockData", "params": { "enable": true } }
        // TUIRoomEngine.sharedInstance().callExperimentalAPI(
        //     jsonStr = JSON.stringify(enableLayoutTemplateMockData) ?? "",
        //     callback = (jsonData : string) : void => {
        //         console.error(`${RTC_TAG}, EnableLayoutTemplateMockData, jsonData: ${jsonData}`)
        //     }
        // )
    }

    public createLive(options : CreateLiveOptions) {
        console.log(`${LIVE_TAG} createLive, data: ${JSON.stringify(options)}`);
        this.enableUnlimitedRoom()

        let nativeLiveInfo : LiveInfo = ParamsCovert.convertLiveInfo(options.liveInfo)
        V2RTCRoomEngine.shared.getLiveStore().createLive(
            nativeLiveInfo,
            onSuccess = () : void => {
                console.log(`${LIVE_TAG} createLive success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${LIVE_TAG} createLive fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public joinLive(options : JoinLiveOptions) {
        console.log(`${LIVE_TAG} joinLive, data: ${JSON.stringify(options)}`);
        this.enableUnlimitedRoom()

        V2RTCRoomEngine.shared.getLiveSeatStore(liveId = options.liveId)

        V2RTCRoomEngine.shared.getLiveStore().joinLive(
            liveId = options.liveId,
            onSuccess = () : void => {
                console.log(`${LIVE_TAG} joinLive success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${LIVE_TAG} joinLive fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public leaveLive(options : LeaveLiveOptions) {
        console.log(`${LIVE_TAG} leaveLive, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveStore().leaveLive(
            onSuccess = () : void => {
                console.log(`${LIVE_TAG} leaveLive success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${LIVE_TAG} leaveLive fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public endLive(options : EndLiveOptions) {
        console.log(`${LIVE_TAG} endLive, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveStore().endLive(
            onSuccess = () : void => {
                console.log(`${LIVE_TAG} endLive success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${LIVE_TAG} endLive fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public updateLiveInfo(options : UpdateLiveInfoOptions) {
        console.log(`${LIVE_TAG} updateLiveInfo, data: ${JSON.stringify(options)}`);
        let nativeLiveInfo : LiveInfo = ParamsCovert.convertLiveInfo(options.liveInfo)
        V2RTCRoomEngine.shared.getLiveStore().updateLiveInfo(
            nativeLiveInfo,
            onSuccess = () : void => {
                console.log(`${LIVE_TAG} updateLiveInfo success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${LIVE_TAG} updateLiveInfo fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    // ================= LiveSeat 相关接口 =================
    public lockSeat(options : LockSeatOptions) {
        console.log(`${SEAT_TAG} lockSeat, data: ${JSON.stringify(options)}`);

        V2RTCRoomEngine.shared.getLiveSeatStore(liveId = options.liveId).lockSeat(
            seatIndex = options.seatIndex.toInt(),
            lockMode = ParamsCovert.covertLockMode(options.lockMode),
            onSuccess = () : void => {
                console.log(`${SEAT_TAG} lockSeat success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${SEAT_TAG} lockSeat fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public moveToSeat(options : MoveToSeatOptions) {
        console.log(`${SEAT_TAG} moveToSeat, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveSeatStore(liveId = options.liveId).moveToSeat(
            targetIndex = options.targetIndex.toInt(),
            onSuccess = () : void => {
                console.log(`${SEAT_TAG} moveToSeat success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${SEAT_TAG} moveToSeat fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    // ================= LiveAudience 相关接口 =================
    public fetchAudienceList(options : FetchAudienceListOptions) {
        console.log(`${AUDIENCE_TAG} fetchAudienceList, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveAudienceStore(liveId = options.liveId).fetchAudienceList(
            cursor = options.cursor.toUInt(),
            onSuccess = () : void => {
                console.log(`${AUDIENCE_TAG} fetchAudienceList success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${AUDIENCE_TAG} fetchAudienceList fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    public setAdministrator(options : SetAdministratorOptions) {
        console.log(`${AUDIENCE_TAG} setAdministrator, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveAudienceStore(liveId = options.liveId).setAdministrator(
            userId = options.userId,
            onSuccess = () : void => {
                console.log(`${AUDIENCE_TAG} setAdministrator success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${AUDIENCE_TAG} setAdministrator fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    public revokeAdministrator(options : RevokeAdministratorOptions) {
        console.log(`${AUDIENCE_TAG} revokeAdministrator, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveAudienceStore(liveId = options.liveId).revokeAdministrator(
            userId = options.userId,
            onSuccess = () : void => {
                console.log(`${AUDIENCE_TAG} revokeAdministrator success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${AUDIENCE_TAG} revokeAdministrator fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    public kickUserOutOfRoom(options : KickUserOutOfRoomOptions) {
        console.log(`${AUDIENCE_TAG} kickUserOutOfRoom, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveAudienceStore(liveId = options.liveId).kickUserOutOfRoom(
            userId = options.userId,
            onSuccess = () : void => {
                console.log(`${AUDIENCE_TAG} kickUserOutOfRoom success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${AUDIENCE_TAG} kickUserOutOfRoom fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    public disableSendMessage(options : DisableSendMessageOptions) {
        console.log(`${AUDIENCE_TAG} disableSendMessage, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLiveAudienceStore(liveId = options.liveId).disableSendMessage(
            userId = options.userId,
            isDisable = options.isDisable,
            onSuccess = () : void => {
                console.log(`${AUDIENCE_TAG} disableSendMessage success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${AUDIENCE_TAG} disableSendMessage fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    // ================= Device 相关接口 =================
    public openLocalMicrophone(options : OpenLocalMicrophoneOptions) {
        console.log(`${DEVICE_TAG} openLocalMicrophone, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().openLocalMicrophone(
            onSuccess = () : void => {
                console.log(`${DEVICE_TAG} openLocalMicrophone success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${DEVICE_TAG} openLocalMicrophone fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    public closeLocalMicrophone() {
        console.log(`${DEVICE_TAG} closeLocalMicrophone`);
        V2RTCRoomEngine.shared.getDeviceStore().closeLocalMicrophone();
    }
    public muteLocalAudio() {
        console.log(`${DEVICE_TAG} muteLocalAudio`);
        V2RTCRoomEngine.shared.getDeviceStore().muteLocalAudio();
    }
    public unmuteLocalAudio(options : UnmuteLocalAudioOptions) {
        console.log(`${DEVICE_TAG} unmuteLocalAudio, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().unmuteLocalAudio(
            onSuccess = () : void => {
                console.log(`${DEVICE_TAG} unmuteLocalAudio success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${DEVICE_TAG} unmuteLocalAudio fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    public setAudioRoute(options : SetAudioRouteOptions) {
        console.log(`${DEVICE_TAG} setAudioRoute, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().setAudioRoute(ParamsCovert.convertAudioOutput(options.route));
    }
    public openLocalCamera(options : OpenLocalCameraOptions) {
        console.log(`${DEVICE_TAG} openLocalCamera, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().openLocalCamera(
            isFront = options.isFront ?? true,
            onSuccess = () : void => {
                console.log(`${DEVICE_TAG} openLocalCamera success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${DEVICE_TAG} openLocalCamera fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    public closeLocalCamera() {
        console.log(`${DEVICE_TAG} closeLocalCamera`);
        V2RTCRoomEngine.shared.getDeviceStore().closeLocalCamera();
    }
    public switchCamera(options : SwitchCameraOptions) {
        console.log(`${DEVICE_TAG} switchCamera, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().switchCamera(isFront = options.isFront ?? false);
    }
    public switchMirror(options : SwitchMirrorOptions) {
        console.log(`${DEVICE_TAG} switchMirror, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().switchMirror(isMirror = options.isMirror ?? false);
    }
    public updateVideoQuality(options : UpdateVideoQualityOptions) {
        console.log(`${DEVICE_TAG} updateVideoQuality, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().updateVideoQuality(
            ParamsCovert.covertVideoQuality(options.quality)
        )
    }
    public startScreenShare(options : startScreenShareOptions) {
        console.log(`${DEVICE_TAG} startScreenShare, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getDeviceStore().startScreenShare(appGroup = options.appGroup);
    }
    public stopScreenShare() {
        console.log(`${DEVICE_TAG} stopScreenShare`);
        V2RTCRoomEngine.shared.getDeviceStore().stopScreenShare();
    }

    // ================= CoHost 相关接口 =================    
    public sendCoHostRequest(options : SendCoHostRequestOptions) {
        console.log(`${COHOST_TAG} sendCoHostRequest, data: ${JSON.stringify(options)}`);

        V2RTCRoomEngine.shared.getCoHostStore(liveId = options.liveId).sendCoHostRequest(
            user = ParamsCovert.convertSeatUserInfo(options.seatUserInfo),
            timeout = options.timeout?.toUInt() ?? 0,
            extensionInfo = options.extensionInfo ?? "",
            onSuccess = () : void => {
                options.success?.();
            },
            onError = (error : Int, errMsg : String) : void => {
                options.fail?.(error as number, errMsg as string);
            }
        )
    }

    public cancelCoHostRequest(options : CancelCoHostRequestOptions) {
        console.log(`${COHOST_TAG} cancelCoHostRequest, data: ${JSON.stringify(options)}`);

        V2RTCRoomEngine.shared.getCoHostStore(liveId = options.liveId).cancelCoHostRequest(
            user = ParamsCovert.convertSeatUserInfo(options.seatUserInfo),
            onSuccess = () : void => {
                console.log(`${COHOST_TAG} cancelCoHostRequest success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COHOST_TAG} cancelCoHostRequest fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public acceptCoHostRequest(options : AcceptCoHostRequestOptions) {
        console.log(`${COHOST_TAG} acceptCoHostRequest, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoHostStore(liveId = options.liveId).acceptCoHostRequest(
            userInfo = ParamsCovert.convertSeatUserInfo(options.userInfo),
            onSuccess = () : void => {
                console.log(`${COHOST_TAG} acceptCoHostRequest success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COHOST_TAG} acceptCoHostRequest fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public rejectCoHostRequest(options : RejectCoHostRequestOptions) {
        console.log(`${COHOST_TAG} rejectCoHostRequest, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoHostStore(liveId = options.liveId).rejectCoHostRequest(
            userInfo = ParamsCovert.convertSeatUserInfo(options.userInfo),
            onSuccess = () : void => {
                console.log(`${COHOST_TAG} rejectCoHostRequest success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COHOST_TAG} rejectCoHostRequest fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public exitCoHost(options : ExitCoHostOptions) {
        console.log(`${COHOST_TAG} exitCoHost, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoHostStore(liveId = options.liveId).exitCoHost(
            onSuccess = () : void => {
                console.log(`${COHOST_TAG} exitCoHost success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COHOST_TAG} exitCoHost fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    // ================= CoGuest 相关接口 =================
    public sendCoGuestRequest(options : SendCoGuestRequestOptions) {
        console.log(`${COGUEST_TAG} sendCoGuestRequest, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoGuestStore(liveId = options.liveId).sendCoGuestRequest(
            seatIndex = options.seatIndex.toInt(),
            timeout = options.timeout.toDouble(),
            userId = options.userId,
            extraInfo = options.extraInfo,
            onAccepted = (requestId : string, userId : string) => {
                console.log(`${COGUEST_TAG} sendCoGuestRequest onAccepted, requestId: ${requestId}, userId: ${userId}`);
                options.onAccepted?.(requestId, userId);
            },
            onRejected = (requestId : string, userId : string, msg : string) => {
                console.log(`${COGUEST_TAG} sendCoGuestRequest onRejected, requestId: ${requestId}, userId: ${userId}, msg: ${msg}`);
                options.onRejected?.(requestId, userId, msg);
            },
            onCancelled = (requestId : string, userId : string) => {
                console.log(`${COGUEST_TAG} sendCoGuestRequest onCancelled, requestId: ${requestId}, userId: ${userId}`);
                options.onCancelled?.(requestId, userId);
            },
            onTimeout = (requestId : string, userId : string) => {
                console.log(`${COGUEST_TAG} sendCoGuestRequest onTimeout, requestId: ${requestId}, userId: ${userId}`);
                options.onTimeout?.(requestId, userId);
            },
            onError = (requestId : string, userId : string, error : TUIError, errMsg : string) => {
                console.log(`${COGUEST_TAG} sendCoGuestRequest onError, requestId: ${requestId}, userId: ${userId}, error: ${error}, errMsg: ${errMsg}`);
                options.onError?.(requestId, userId, error.rawValue as number, errMsg);
            }
        )
    }

    public cancelCoGuestRequest(options : CancelCoGuestRequestOptions) {
        console.log(`${COGUEST_TAG} cancelCoGuestRequest, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoGuestStore(liveId = options.liveId).cancelCoGuestRequest(
            userId = options.userId,
            onSuccess = () : void => {
                console.log(`${COGUEST_TAG} cancelCoGuestRequest success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COGUEST_TAG} cancelCoGuestRequest fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public acceptCoGuestRequest(options : AcceptCoGuestRequestOptions) {
        console.log(`${COGUEST_TAG} acceptCoGuestRequest, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoGuestStore(liveId = options.liveId).acceptCoGuestRequest(
            userId = options.userId,
            onSuccess = () : void => {
                console.log(`${COGUEST_TAG} acceptCoGuestRequest success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COGUEST_TAG} acceptCoGuestRequest fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public rejectCoGuestRequest(options : RejectCoGuestRequestOptions) {
        console.log(`${COGUEST_TAG} rejectCoGuestRequest, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoGuestStore(liveId = options.liveId).rejectCoGuestRequest(
            userId = options.userId,
            onSuccess = () : void => {
                console.log(`${COGUEST_TAG} rejectCoGuestRequest success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COGUEST_TAG} rejectCoGuestRequest fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public disconnect(options : DisconnectOptions) {
        console.log(`${COGUEST_TAG} disconnect, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getCoGuestStore(liveId = options.liveId).disconnect(
            userId = options.userId,
            onSuccess = () : void => {
                console.log(`${COGUEST_TAG} disconnect success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${COGUEST_TAG} disconnect fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    // ================= Barrage 相关接口 =================
    public sendTextMessage(options : SendTextMessageOptions) {
        console.log(`${BARRAGE_TAG} sendTextMessage, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getBarrageStore(liveId = options.liveId).sendTextMessage(
            text = options.text,
            extensionInfo = options.extensionInfo,
            onSuccess = () : void => {
                console.log(`${BARRAGE_TAG} sendTextMessage success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${BARRAGE_TAG} sendTextMessage fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public sendCustomMessage(options : SendCustomMessageOptions) {
        console.log(`${BARRAGE_TAG} sendCustomMessage, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getBarrageStore(liveId = options.liveId).sendCustomMessage(
            businessId = options.businessId,
            data = options.data,
            onSuccess = () : void => {
                console.log(`${BARRAGE_TAG} sendCustomMessage success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${BARRAGE_TAG} sendCustomMessage fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    // ================= Gift 相关接口 =================
    public getGiftList(options : GetGiftListOptions) {
        console.log(`${GIFT_TAG} getGiftList, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getGiftStore(liveId = options.liveId).getGiftList(
            onSuccess = () : void => {
                console.log(`${GIFT_TAG} getGiftList success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${GIFT_TAG} getGiftList fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }

    public sendGift(options : SendGiftOptions) {
        console.log(`${GIFT_TAG} sendGift, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getGiftStore(liveId = options.liveId).sendGift(
            giftId = options.giftId,
            count = options.count.toUInt(),
            onSuccess = () : void => {
                console.log(`${GIFT_TAG} sendGift success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`${GIFT_TAG} sendGift fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    // ================= BeautyStore 相关接口 =================
    public setSmoothLevel(options : SetSmoothLevelOptions) {
        console.warn(`${BEAUTY_TAG} setSmoothLevel, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getBaseBeautyStore().setSmoothLevel(smoothLevel = options.smoothLevel.toFloat());
    }

    public setWhitenessLevel(options : SetWhitenessLevelOptions) {
        console.warn(`${BEAUTY_TAG} setWhitenessLevel, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getBaseBeautyStore().setWhitenessLevel(whitenessLevel = options.whitenessLevel.toFloat());
    }

    public setRuddyLevel(options : SetRuddyLevelOptions) {
        console.warn(`${BEAUTY_TAG} setRuddyLevel, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getBaseBeautyStore().setRuddyLevel(ruddyLevel = options.ruddyLevel.toFloat());
    }

    // ================= V2AudioEffect 相关接口 =================
    public setVoiceEarMonitorEnable(options : SetVoiceEarMonitorEnableOptions) {
        console.warn(`${DEVICE_TAG} setVoiceEarMonitorEnable, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getAudioEffectStore().setVoiceEarMonitorEnable(enable = options.enable);
    }

    public setVoiceEarMonitorVolume(options : SetVoiceEarMonitorVolumeOptions) {
        console.warn(`${AUDIOEFFECT_TAG} setVoiceEarMonitorVolume, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getAudioEffectStore().setVoiceEarMonitorVolume(volume = options.volume.toInt());
    }

    public setMicrophoneVolume(options : SetMicrophoneVolumeOptions) {
        console.warn(`${AUDIOEFFECT_TAG} setMicrophoneVolume, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getAudioEffectStore().setMicrophoneVolume(volume = options.volume.toInt());
    }

    public setChangerType(options : SetChangerTypeOptions) {
        console.warn(`${AUDIOEFFECT_TAG} setChangerType, data: ${JSON.stringify(options)}`);
        let type = ParamsCovert.convertAudioChangerType(options.changerType)
        V2RTCRoomEngine.shared.getAudioEffectStore().setChangerType(type = type);
    }

    public setReverbType(options : SetReverbTypeOptions) {
        console.warn(`${AUDIOEFFECT_TAG} setReverbType, data: ${JSON.stringify(options)}`);
        let type = ParamsCovert.convertAudioReverbType(options.reverbType)
        V2RTCRoomEngine.shared.getAudioEffectStore().setReverbType(type = type);
    }

    // ================= BeautyStore 相关接口 =================
    public sendLike(options : SendLikeOptions) {
        console.log(`iOS-Like sendLike, data: ${JSON.stringify(options)}`);
        V2RTCRoomEngine.shared.getLikeStore(liveId = options.liveId).sendLike(
            onSuccess = () : void => {
                console.log(`iOS-Like sendLike success`);
                options.success?.();
            },
            onError = (error : TUIError, errMsg : String) : void => {
                console.error(`iOS-Like sendLike fail, error: ${error}, errMsg: ${errMsg}`);
                options.fail?.(error.rawValue as number, errMsg as string);
            }
        )
    }
    // ================= 实验性接口 =================
    public callExperimentalAPI(options: CallExperimentalAPIOptions) {
        console.log(`iOS-callExperimentalAPI, data: ${options}`);

        ExperimentalApiInvoker.shared.callExperimentalAPI(
            options.jsonData,
            callback = (jsonData : string) : void => {
                console.log(`iOS-callExperimentalAPI, jsonData: ${jsonData}`)
            }
        )
    }

    // ================= Extension 接口 =================
    public shareLog(row : number) {
        LogUpload.shared.shareLog(row.toInt())
    }

    public fetchLogfileList(option: fetchLogfileListOptions) {
        let result =  LogUpload.shared.fetchLogfileList()
        option.result(JSON.stringify(result))
    }

    // ================= 事件注册接口 =================
    @UTSJS.keepAlive
    public on(eventName : string, listener : (key : string, res : any) => void, liveId : string) : void {
        console.log(`${RTC_TAG} observer, eventName: ${eventName}, liveId: ${liveId}`);

        if (eventName == "loginStoreChanged") {
            LoginStoreObserver.shared.loginStoreChanged(function (key : string, data : string) {
                console.log(`${RTC_TAG} loginStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "liveStoreChanged") {
            LiveStoreObserver.shared.liveStoreChanged(function (key : string, data : string) {
                console.log(`${LIVE_TAG} liveStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "liveSeatStoreChanged" && liveId.length > 0) {
            LiveSeatStoreObserver.shared.liveSeatStoreChanged(liveId, function (key : string, data : string) {
                console.log(`${LIVE_TAG} liveSeatStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "liveAudienceStoreChanged" && liveId.length > 0) {
            LiveAudienceStoreObserver.shared.liveAudienceStoreChanged(liveId, function (key : string, data : string) {
                console.log(`${LIVE_TAG} liveAudienceStoreChanged, key: ${key}, data: ${data}`)
                listener(key, data)
            })
        }
        if (eventName == "giftStoreChanged" && liveId.length > 0) {
            GiftStoreObserver.shared.giftStoreChanged(liveId, function (key : string, data : string) {
                console.log(`${GIFT_TAG} giftStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "deviceStoreChanged") {
            DeviceStoreObserver.shared.deviceStoreChanged(function (key : string, data : string) {
                // console.log(`${DEVICE_TAG} deviceStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "coHostStoreChanged" && liveId.length > 0) {
            CoHostStoreObserver.shared.coHostStoreChanged(liveId, function (key : string, data : string) {
                console.log(`${COHOST_TAG} coHostStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "coGuestStoreChanged" && liveId.length > 0) {
            CoGuestStoreObserver.shared.coGuestStoreChanged(liveId, function (key : string, data : string) {
                console.log(`${COGUEST_TAG} coGuestStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "barrageStoreChanged" && liveId.length > 0) {
            BarrageStoreObserver.shared.barrageStoreChanged(liveId, function (key : string, data : string) {
                console.log(`${BARRAGE_TAG} barrageStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "beautyStoreChanged") {
            BeautyStoreObserver.shared.beautyStoreChanged(function (key : string, data : string) {
                console.log(`${BEAUTY_TAG} beautyStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "audioEffectStoreChanged") {
            AudioEffectStoreObserver.shared.audioEffectStoreChanged(function (key : string, data : string) {
                console.log(`${AUDIOEFFECT_TAG} audioEffectStoreChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "liveSummaryStateChanged" && liveId.length > 0) {
            LiveSummaryStateObserver.shared.liveSummaryStateChanged(liveId, function (key : string, data : string) {
                console.log(`liveSummaryStateChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
        if (eventName == "likeStateChanged" && liveId.length > 0) {
            LikeStateObserver.shared.likeStateChanged(liveId, function (key : string, data : string) {
                console.log(`likeStateChanged, key: ${key}, data: ${data}`);
                listener(key, data)
            })
        }
    }
}